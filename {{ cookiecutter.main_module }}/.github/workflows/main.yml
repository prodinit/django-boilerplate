name: Run Tests

on: [push, pull_request]

jobs:
  spell_check:
    runs-on: ubuntu-latest
    steps:
      - name: Check out Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Install codespell
        run: |
          pip install codespell
          codespell --skip=".git,./static/*,poetry.lock,pyproject.toml"
        continue-on-error: false

  black_check:
    runs-on: ubuntu-latest
    steps:
      - name: Check out Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Install black
        run: |
          pip install black
          black . --check --exclude "^.*\b(migrations)\b.*$"
        continue-on-error: false

  pydoc_check:
    needs: [black_check]
    runs-on: ubuntu-latest
    steps:
      - name: Check out Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: pydoc-numpy-docstring
        id: docstring
        run: |
          pip3 install pydocstyle
          pydocstyle .
        continue-on-error: false

  password_check:
    runs-on: ubuntu-latest
    steps:
      - name: Check out HEAD
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Check for  password
        uses: AlicanAkkus/pinder-action@0.1

  test_cases:
    runs-on: ubuntu-20.04
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/common
      DJANGO_SETTINGS_MODULE: settings.testing

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"
          cache: "pip"
      - name: Install poetry
        run: |
          pip3 install poetry==1.5.1
      - name: Install requirements
        run: |
          python -m pip install --upgrade pip
          poetry install --with dev
      - name: Run tests
        run: |
          poetry run pytest --cov -v --tb=native

  terraform_validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    env:
      TF_VAR_PRODUCT_ENVIRONMENT: "testing"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.3.9"
      - name: Terraform Init
        id: init
        run: cd deployment/terraform && terraform init -backend=false
      - name: Terraform Validate
        id: validate
        run: cd deployment/terraform && terraform validate
        continue-on-error: false
